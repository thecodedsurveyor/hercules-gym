// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String   @unique
  password            String
  fitnessGoal         String?
  experienceLevel     String?
  preferredTime       String?
  onboardingCompleted Boolean  @default(false)
  onboardingStep      Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Basic Information (Onboarding Step 2)
  age    Int?
  gender String?
  height Float? // in cm
  weight Float? // in kg

  // Fitness Goals (Onboarding Step 3)
  fitnessGoals String[] // Multiple goals selected
  goalPriority String[] // Ranked order of goals
  primaryGoal  String? // Top priority goal

  // Activity & Fitness Level (Onboarding Step 4)
  fitnessLevel     String? // beginner, intermediate, advanced
  workoutFrequency Int? // workouts per week (1-7)

  // Body Composition (Onboarding Step 5) - Optional
  bodyFatPercentage Float?
  measurements      Json? // Store body measurements (waist, chest, arms, etc.)

  // Dietary Preferences (Onboarding Step 6)
  dietaryPreferences String[] // vegetarian, vegan, keto, etc.

  // Gamification
  totalPoints         Int       @default(0)
  currentStreak       Int       @default(0)
  longestStreak       Int       @default(0)
  totalWorkouts       Int       @default(0)
  totalCaloriesBurned Float     @default(0)
  weeklyWorkoutGoal   Int       @default(3)
  lastActivityDate    DateTime?
  lastLogin           DateTime?
  totalLogins         Int       @default(0)

  // Relations
  workoutPlans     WorkoutPlan[]
  mealPlans        MealPlan[]
  progressLogs     ProgressLog[]
  forumPosts       ForumPost[]
  achievements     UserAchievement[]
  messages         Message[]         @relation("UserMessages")
  workoutLogs      WorkoutLog[]
  mealLogs         MealLog[]
  challengeEntries ChallengeEntry[]
  communityPosts   CommunityPost[]
  postLikes        PostLike[]
  postComments     PostComment[]
  notifications    Notification[]
}

// Workout Plan model
model WorkoutPlan {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  exercises   Exercise[]
  difficulty  String
  duration    Int // in minutes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  workoutLogs WorkoutLog[]
}

// Exercise model
model Exercise {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  sets        Int
  reps        Int
  restTime    Int // in seconds
  videoUrl    String?
  category    String // cardio, strength, flexibility

  // Relations
  workoutPlanId String      @db.ObjectId
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
}

// Meal Plan model
model MealPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  meals       Meal[]
  calories    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Meal model
model Meal {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  calories    Int
  protein     Float
  carbs       Float
  fats        Float
  type        String // breakfast, lunch, dinner, snack

  // Relations
  mealPlanId String    @db.ObjectId
  mealPlan   MealPlan  @relation(fields: [mealPlanId], references: [id])
  mealLogs   MealLog[]
}

// Progress Log model
model ProgressLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  weight       Float?
  bodyFat      Float?
  measurements Json? // Store body measurements
  photos       String[] // URLs to progress photos
  notes        String?
  createdAt    DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Forum Post model
model ForumPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String    @db.ObjectId
  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
}

// Comment model
model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  // Relations
  postId String    @db.ObjectId
  post   ForumPost @relation(fields: [postId], references: [id])
}

// Achievement model
model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  points      Int
  badgeIcon   String // Icon name for the badge
  category    String // workout, nutrition, community, streak, etc.
  threshold   Int? // Number required to unlock (e.g., 5 workouts, 7 day streak)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]
}

// User Achievement model (many-to-many relationship)
model UserAchievement {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  earnedAt DateTime @default(now())

  // Relations
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  achievementId String      @db.ObjectId
  achievement   Achievement @relation(fields: [achievementId], references: [id])
}

// Daily Challenge model
model DailyChallenge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  points      Int
  type        String // workout, nutrition, mindfulness, etc.
  targetValue Int? // e.g., 15 minutes for "15-minute HIIT"
  date        DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  challengeEntries ChallengeEntry[]
}

// Weekly Challenge model
model WeeklyChallenge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  points      Int
  type        String
  targetValue Int // e.g., 4 workouts for "Complete 4 workouts this week"
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  challengeEntries ChallengeEntry[]
}

// Challenge Entry model (tracks user participation)
model ChallengeEntry {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  completed    Boolean   @default(false)
  completedAt  DateTime?
  progress     Int       @default(0) // Current progress towards target
  pointsEarned Int       @default(0)
  createdAt    DateTime  @default(now())

  // Relations
  userId            String           @db.ObjectId
  user              User             @relation(fields: [userId], references: [id])
  dailyChallengeId  String?          @db.ObjectId
  dailyChallenge    DailyChallenge?  @relation(fields: [dailyChallengeId], references: [id])
  weeklyChallengeId String?          @db.ObjectId
  weeklyChallenge   WeeklyChallenge? @relation(fields: [weeklyChallengeId], references: [id])
}

// Workout Log model (tracks completed workouts)
model WorkoutLog {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  workoutName    String
  duration       Int // in minutes
  caloriesBurned Float?
  exercises      Json // Array of exercises with sets/reps completed
  notes          String?
  completedAt    DateTime @default(now())

  // Relations
  userId        String       @db.ObjectId
  user          User         @relation(fields: [userId], references: [id])
  workoutPlanId String?      @db.ObjectId
  workoutPlan   WorkoutPlan? @relation(fields: [workoutPlanId], references: [id])
}

// Meal Log model (tracks meal consumption)
model MealLog {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  mealName String
  mealType String // breakfast, lunch, dinner, snack
  calories Int
  protein  Float?
  carbs    Float?
  fats     Float?
  notes    String?
  loggedAt DateTime @default(now())

  // Relations
  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  mealId String? @db.ObjectId
  meal   Meal?   @relation(fields: [mealId], references: [id])
}

// Community Post model (enhanced from ForumPost)
model CommunityPost {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  imageUrls       String[] // Progress photos, etc.
  postType        String // progress, motivation, question, achievement
  likes           Int      @default(0)
  isAchievement   Boolean  @default(false)
  achievementType String? // workout_milestone, weight_loss, etc.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  comments  PostComment[]
  postLikes PostLike[]
}

// Post Like model
model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  userId String        @db.ObjectId
  user   User          @relation(fields: [userId], references: [id])
  postId String        @db.ObjectId
  post   CommunityPost @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

// Post Comment model
model PostComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  // Relations
  userId String        @db.ObjectId
  user   User          @relation(fields: [userId], references: [id])
  postId String        @db.ObjectId
  post   CommunityPost @relation(fields: [postId], references: [id])
}

// Notification model
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      String // workout_reminder, meal_reminder, achievement, challenge
  isRead    Boolean  @default(false)
  actionUrl String? // Deep link for notification action
  createdAt DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// AI Motivation Post model
model MotivationPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quote     String
  category  String // motivation, fitness_tip, nutrition_tip
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

// Message model for trainer-client chat
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation("UserMessages", fields: [userId], references: [id])
}
