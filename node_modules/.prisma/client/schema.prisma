// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String   @unique
  password            String
  fitnessGoal         String?
  experienceLevel     String?
  preferredTime       String?
  onboardingCompleted Boolean  @default(false)
  onboardingStep      Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Basic Information (Onboarding Step 2)
  age    Int?
  gender String?
  height Float? // in cm
  weight Float? // in kg

  // Fitness Goals (Onboarding Step 3)
  fitnessGoals String[] // Multiple goals selected
  goalPriority String[] // Ranked order of goals
  primaryGoal  String? // Top priority goal

  // Activity & Fitness Level (Onboarding Step 4)
  fitnessLevel     String? // beginner, intermediate, advanced
  workoutFrequency Int? // workouts per week (1-7)

  // Body Composition (Onboarding Step 5) - Optional
  bodyFatPercentage Float?
  measurements      Json? // Store body measurements (waist, chest, arms, etc.)

  // Dietary Preferences (Onboarding Step 6)
  dietaryPreferences String[] // vegetarian, vegan, keto, etc.

  // Relations
  workoutPlans WorkoutPlan[]
  mealPlans    MealPlan[]
  progressLogs ProgressLog[]
  forumPosts   ForumPost[]
  achievements Achievement[]
  messages     Message[]     @relation("UserMessages")
}

// Workout Plan model
model WorkoutPlan {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  exercises   Exercise[]
  difficulty  String
  duration    Int // in minutes
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Exercise model
model Exercise {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  sets        Int
  reps        Int
  restTime    Int // in seconds
  videoUrl    String?
  category    String // cardio, strength, flexibility

  // Relations
  workoutPlanId String      @db.ObjectId
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
}

// Meal Plan model
model MealPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  meals       Meal[]
  calories    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Meal model
model Meal {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  calories    Int
  protein     Float
  carbs       Float
  fats        Float
  type        String // breakfast, lunch, dinner, snack

  // Relations
  mealPlanId String   @db.ObjectId
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
}

// Progress Log model
model ProgressLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  weight       Float?
  bodyFat      Float?
  measurements Json? // Store body measurements
  photos       String[] // URLs to progress photos
  notes        String?
  createdAt    DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Forum Post model
model ForumPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String    @db.ObjectId
  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]
}

// Comment model
model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  // Relations
  postId String    @db.ObjectId
  post   ForumPost @relation(fields: [postId], references: [id])
}

// Achievement model
model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  points      Int
  createdAt   DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// Message model for trainer-client chat
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation("UserMessages", fields: [userId], references: [id])
}
